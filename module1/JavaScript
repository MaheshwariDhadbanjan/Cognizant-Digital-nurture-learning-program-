// === 1. JavaScript Basics & Setup ===
console.log("Welcome to the Community Portal");

window.onload = () => {
  alert("Page is fully loaded");
};

// === 2. Syntax, Data Types, and Operators ===
const eventName = "Music Night";
const eventDate = "2025-06-10";
let availableSeats = 30;

const eventDetails = `${eventName} on ${eventDate}, Seats: ${availableSeats}`;
console.log(eventDetails);

availableSeats--; // After registration
console.log(`Seats left: ${availableSeats}`);

// === 3. Conditionals, Loops, and Error Handling ===
const events = [
  { name: "Yoga Workshop", date: "2025-06-01", seats: 5 },
  { name: "Tech Talk", date: "2024-05-01", seats: 0 },
];

events.forEach(event => {
  const isFuture = new Date(event.date) > new Date();
  if (isFuture && event.seats > 0) {
    console.log(`Upcoming: ${event.name}`);
  } else {
    console.log(`Skipping: ${event.name}`);
  }
});

function register(event) {
  try {
    if (event.seats <= 0) throw new Error("No seats available");
    event.seats--;
    console.log(`Registered for ${event.name}`);
  } catch (err) {
    console.error(err.message);
  }
}

// === 4. Functions, Scope, Closures, Higher-Order Functions ===
function addEvent(events, event) {
  events.push(event);
}

function registerUser(event) {
  if (event.seats > 0) {
    event.seats--;
    return true;
  }
  return false;
}

function filterEventsByCategory(events, category) {
  return events.filter(e => e.category === category);
}

function categoryTracker() {
  let count = 0;
  return () => ++count;
}

function searchEvents(events, callback) {
  return events.filter(callback);
}

// === 5. Objects and Prototypes ===
function Event(name, date, seats) {
  this.name = name;
  this.date = date;
  this.seats = seats;
}

Event.prototype.checkAvailability = function () {
  return this.seats > 0;
};

const e1 = new Event("Art Expo", "2025-07-01", 20);
console.log(Object.entries(e1));

// === 6. Arrays and Methods ===
let eventsArray = [
  { name: "Rock Concert", category: "music" },
  { name: "Baking Workshop", category: "cooking" }
];

eventsArray.push({ name: "Jazz Night", category: "music" });

const musicEvents = eventsArray.filter(e => e.category === "music");

const displayCards = eventsArray.map(e => `Event: ${e.name}`);
console.log(displayCards);

// === 7. DOM Manipulation ===
const container = document.querySelector("#eventContainer");

eventsArray.forEach(event => {
  const card = document.createElement("div");
  card.textContent = `${event.name} - ${event.category}`;
  container.appendChild(card);
});

// === 8. Event Handling ===
document.querySelectorAll(".registerBtn").forEach(btn =>
  btn.onclick = () => alert("Registered!")
);

document.querySelector("#categorySelect").onchange = (e) => {
  const selected = e.target.value;
  const filtered = filterEventsByCategory(eventsArray, selected);
  console.log(filtered);
};

document.querySelector("#searchInput").onkeydown = (e) => {
  if (e.key === "Enter") {
    const query = e.target.value.toLowerCase();
    const results = eventsArray.filter(ev => ev.name.toLowerCase().includes(query));
    console.log(results);
  }
};

// === 9. Async JS, Promises, Async/Await ===
fetch("mock-api/events.json")
  .then(res => res.json())
  .then(data => console.log(data))
  .catch(err => console.error(err));

async function fetchEvents() {
  console.log("Loading...");
  try {
    const res = await fetch("mock-api/events.json");
    const data = await res.json();
    console.log(data);
  } catch (err) {
    console.error(err);
  }
}

// === 10. Modern JavaScript Features ===
const showEvent = ({ name, date }) => {
  console.log(`Event: ${name} on ${date}`);
};

const allEvents = [...eventsArray]; // Clone array

// === 11. Working with Forms ===
document.querySelector("form").addEventListener("submit", (e) => {
  e.preventDefault();
  const { name, email, event } = e.target.elements;
  if (!name.value || !email.value) {
    document.querySelector("#error").textContent = "All fields required.";
    return;
  }
  console.log(`Registered ${name.value} for ${event.value}`);
});

// === 12. AJAX & Fetch API ===
function submitRegistration(user) {
  console.log("Submitting...");
  setTimeout(() => {
    fetch("https://mockapi.io/submit", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(user)
    })
    .then(res => res.json())
    .then(data => alert("Success!"))
    .catch(err => alert("Failed!"));
  }, 1000);
}

// === 13. Debugging and Testing ===
function debugFormSubmission(data) {
  console.log("Submitting form", data);
  debugger;
  fetch("/api/register", {
    method: "POST",
    body: JSON.stringify(data)
  }).then(r => console.log(r));
}

// === 14. jQuery and JS Frameworks ===
// Include in HTML: <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
$(document).ready(() => {
  $('#registerBtn').click(() => {
    alert('Registered via jQuery!');
  });

  $('.eventCard').fadeIn();

  setTimeout(() => $('.eventCard').fadeOut(), 2000);
});

// Benefit of frameworks like React/Vue:
// They help build interactive UIs using components, offer reactivity, and improve performance with virtual DOM.
